# the first row names gets weird "ï.." prefixe
# names(fb)[1] <- "Domain.Code"
# the domain is the common to the whole data set "Food Balances (-2013, old methodology and population)" so we can remove it
unique(fb$Domain)
fb <- fb[, !grepl("Domain", names(fb))]
## Area and area code are bijective
length(unique(fb$Area)) == length(unique(fb$Area.Code))
fb <- dplyr::select(fb, -Area.Code)
## Element
unique(fb$Element)
# "Food supply (kcal/capita/day)"
# "Protein supply quantity (g/capita/day)"
# "Fat supply quantity (g/capita/day)"
# "Production"
# "Import Quantity"
# "Stock Variation"
# "Export Quantity"
# "Domestic supply quantity"
# "Food"
# "Food supply quantity (kg/capita/yr)"
# Element and Element.Code are bijective
length(unique(fb$Element)) == length(unique(fb$Element.Code))
fb <- dplyr::select(fb, -Element.Code)
## Item
unique(fb$Item)
# there are some Items that have more than one Item.Code
length(unique(fb$Item)) == length(unique(fb$Item.Code))
spot_doublones <- sapply(unique(fb$Item), function(itm){itm_length <- fb[fb$Item==itm,"Item.Code"] %>% unique() %>% length()
itm_spot <- if_else(itm_length > 1, true = itm, false = "")
return(itm_spot) })
spot_doublones[spot_doublones != ""]
fb[fb$Item == "Eggs","Item.Code"] %>% unique()
fb[fb$Item == "Milk - Excluding Butter","Item.Code"] %>% unique()
fb[fb$Item == "Miscellaneous","Item.Code"] %>% unique()
fb[fb$Item == "Eggs",]
fb[fb$Item == "Miscellaneous",]
# they seem to be the same figures, or almost, but with different Flags (not always) --> let's keep only one instance
# Items with several item codes are duplicates (within the same country and Element)
fb[duplicated(fb[,c("Area", "Element", "Item")]), ] %>% nrow() # 2951 obs. in 2001
# we want those that are not duplicates
fb <- fb[!duplicated(fb[,c("Area", "Element", "Item")]), ]
if(!(length(unique(fb$Item)) == length(unique(fb$Item.Code)))){
stop("there are still duplicates in Item variable")
}
fb <- dplyr::select(fb, -Item.Code)
# keep only Items specified
fb <- dplyr::filter(fb, Item %in% all_items)
## Year
fb <- dplyr::select(fb, -Year.Code)
# Year is not useful either
fb <- dplyr::select(fb, -Year)
## Unit
# For "Import Quantity", "Domestic supply quantity" & "Food", the unit is not given in the Element.
# some checks that the units are expressed in a sound way
prod_u <- fb[fb$Element=="Production", "Unit"] %>% unique()
import_u <- fb[fb$Element=="Import Quantity", "Unit"] %>% unique()
export_u <- fb[fb$Element=="Export Quantity", "Unit"] %>% unique()
stock_u <- fb[fb$Element=="Stock Variation", "Unit"] %>% unique()
dom_supply_u <- fb[fb$Element=="Domestic supply quantity", "Unit"] %>% unique()
food_u <- fb[fb$Element=="Food", "Unit"] %>% unique()
if(length(import_u) > 1 | length(dom_supply_u) > 1 | length(food_u) > 1 |
length(prod_u) > 1 | length(export_u) > 1 | length(stock_u) > 1 ){
stop("different units used within Elements")
}
if(!all.equal(import_u, dom_supply_u, food_u, prod_u, export_u, stock_u)){
stop("different units used across Elements")
}
if(import_u != "1000 tonnes"){
stop("different units used across YEARS")
}
u_less_slct <- fb$Element %in% c("Production", "Import Quantity", "Export Quantity", "Stock Variation",
"Domestic supply quantity", "Food")
fb[u_less_slct,] <- mutate(fb[u_less_slct,], Element = paste0(Element, " (",Unit,")"))
fb <- dplyr::select(fb, -Unit)
## For the moment, do not bother Flags
fb <- fb[, !grepl("Flag", names(fb))]
# Now split data by Element
unique(fb$Element)
# "Food (1000 tonnes)" is the annual quantity available
# "Food supply quantity (kg/capita/yr)" is the annual quantity available, but divided by population
elmt_wide_ds_list <- list()
for(elmt in unique(fb$Element)){
long_ds <- fb[fb$Element==elmt, c("Area", "Item", "Value")]
wide_ds <- stats::reshape(long_ds,
# varying = unique(long_ds$Item),
# v.names = c("Value"),
sep = ".",
timevar = "Item",
idvar = "Area",
direction = "wide",
new.row.names = NULL)
vars_slct <- grepl("Value.", names(wide_ds))
# those variables that have been reshaped, give the Element identifier to their names
names(wide_ds)[vars_slct] <- paste0(names(wide_ds)[vars_slct], " -- ", elmt)
# checked that " -- " is not used in names already
# any(grepl(" -- ", names(wide_ds)))
# remove "Value." part in names
names(wide_ds)[vars_slct] <- gsub("Value.", "",
x = names(wide_ds)[vars_slct])
elmt_wide_ds_list[[elmt]] <- wide_ds
}
rm(wide_ds)
# and then join them back based on country key
wide_fb <- elmt_wide_ds_list[[1]]
for(i in 2:length(elmt_wide_ds_list)){
wide_fb <- left_join(wide_fb, elmt_wide_ds_list[[i]], by = "Area")
}
# at this point, 175 rows, one for each country, and, if no Item has been removed, 808 columns, one for each type Element*Item
length(all_items)*7 == ncol(wide_fb) - 1
# not all selected items are available for every 7 elements.
# in particular, grand total and vegetable and animal product totals are available only in nutrient, not in weights
### Clean some area related things
unique(wide_fb$Area)
# Handle China: get Taiwan apart (makes sense in food security context)
wide_fb$Area[wide_fb$Area == "China, Taiwan Province of"] <- "Taiwan"
# Remove China (which aggregates China mainland and Taiwan), and keep only China mainland
wide_fb <- dplyr::filter(wide_fb, Area != "China")
# and remove Hong Kong and Macao
wide_fb <- dplyr::filter(wide_fb, Area != "China, Hong Kong SAR")
wide_fb <- dplyr::filter(wide_fb, Area != "China, Macao SAR")
wide_fb[grepl("China", wide_fb$Area), c("Area", "Rice (Milled Equivalent) -- Production (1000 tonnes)")]
# Remove oversea territories
# wide_fb[grepl("Fr", wide_fb$Area), c("Area", "Rice (Milled Equivalent) -- Production (1000 tonnes)")]
wide_fb <- dplyr::filter(wide_fb, Area != "French Polynesia")
wide_fb <- dplyr::filter(wide_fb, Area != "Netherlands Antilles (former)")
wide_fb <- dplyr::filter(wide_fb, Area != "Bermuda")
wide_fb <- dplyr::filter(wide_fb, Area != "New Caledonia")
# Handle some weird names
# "TÃ¼rkiye" and "CÃ´te d'Ivoire"
wide_fb$Area[wide_fb$Area == "TÃ¼rkiye"] <- "Turkey"
wide_fb$Area[wide_fb$Area == "T?rkiye"] <- "Turkey"
# wide_fb[grepl("Tur", wide_fb$Area), c("Area", "Rice (Milled Equivalent) -- Production (1000 tonnes)")]
# wide_fb[grepl("?", wide_fb$Area), c("Area", "Rice (Milled Equivalent) -- Production (1000 tonnes)")]
wide_fb$Area[wide_fb$Area == "CÃ´te d'Ivoire"] <- "Ivory Coast"
wide_fb$Area[wide_fb$Area == "C?te d'Ivoire"] <- "Ivory Coast"
# CONGO - this is special: there is only one Congo in the data, named simply "Congo".
# Checking by the population size in the data, it is the Republic of the Congo (i.e. Congo Brazzaville)
wide_fb$Area[wide_fb$Area == "Congo"] <- "Republic of the Congo"
# Keep track of the year
wide_fb$year <- year
wide_fb_list[[match(year, pretreatment_years)]] <- wide_fb
} # Close loop over years here, because we will need imputations from other years for NAs in the next steps
# stack to make a panel of food balance data
pfb <- bind_rows(wide_fb_list)
# rm(wide_fb_list, wide_fb)
# unique(pfb$Area)
#### RDC, LIBYA, SYRIA & PAPUA NEW GUINEA -----------------------------------------------------------
# Let us handle here the fact that the Democratic Republic of Congo is missing in FAOSTAT Food Balance data before 2010.
wide_rdc_list <- list()
missing_country_years <- c(2010, 2011)
for(year in missing_country_years){
rdc <- read.csv(here("input_data", "exposure_variables", paste0("FAOSTAT-foodbalances_missingcountries_aggritems_",year,".csv")))
# unique(rdc$Item)[grepl("meal", unique(rdc$Item))]
# the first row names gets weird "ï.." prefixe
# names(rdc)[1] <- "Domain.Code"
# the domain is the common to the whole data set "Food Balances (-2013, old methodology and population)" so we can remove it
unique(rdc$Domain)
rdc <- rdc[, !grepl("Domain", names(rdc))]
## Area and area code are bijective
length(unique(rdc$Area)) == length(unique(rdc$Area.Code..FAO.)) # NOTICE it's a different name for area code than in FB -2013 data
rdc <- dplyr::select(rdc, -Area.Code..FAO.)
## Element
unique(rdc$Element)
# "Food supply (kcal/capita/day)"
# "Protein supply quantity (g/capita/day)"
# "Fat supply quantity (g/capita/day)"
# "Production"
# "Import Quantity"
# "Stock Variation"
# "Export Quantity"
# "Domestic supply quantity"
# "Food"
# "Food supply quantity (kg/capita/yr)"
# Element and Element.Code are bijective
length(unique(rdc$Element)) == length(unique(rdc$Element.Code))
rdc <- dplyr::select(rdc, -Element.Code)
## Item
unique(rdc$Item)
# there are some Items that have more than one Item.Code
length(unique(rdc$Item)) == length(unique(rdc$Item.Code))
spot_doublones <- sapply(unique(rdc$Item), function(itm){itm_length <- rdc[rdc$Item==itm,"Item.Code"] %>% unique() %>% length()
itm_spot <- if_else(itm_length > 1, true = itm, false = "")
return(itm_spot) })
spot_doublones[spot_doublones != ""]
rdc[rdc$Item == "Eggs","Item.Code"] %>% unique()
rdc[rdc$Item == "Milk - Excluding Butter","Item.Code"] %>% unique()
rdc[rdc$Item == "Miscellaneous","Item.Code"] %>% unique()
rdc[rdc$Item == "Eggs",]
rdc[rdc$Item == "Miscellaneous",]
# they seem to be the same figures, or almost, but with different Flags (not always) --> let's keep only one instance
# Items with several item codes are duplicates (within the same country and Element)
rdc[duplicated(rdc[,c("Area", "Element", "Item")]), ] %>% nrow() # 2951 obs. in 2001
# we want those that are not duplicates
rdc <- rdc[!duplicated(rdc[,c("Area", "Element", "Item")]), ]
if(!(length(unique(rdc$Item)) == length(unique(rdc$Item.Code)))){
stop("there are still duplicates in Item variable")
}
rdc <- dplyr::select(rdc, -Item.Code)
# And some items have different names than in main (old) FB (-2013)
rdc$Item[!(rdc$Item %in% fb$Item)] %>% unique()
rdc$Item[rdc$Item=="Rice and products"] <- "Rice (Milled Equivalent)"
rdc$Item[rdc$Item=="Groundnuts"] <- "Groundnuts (Shelled Eq)"
# keep only Items specified
rdc <- dplyr::filter(rdc, Item %in% all_items)
## Year
rdc <- dplyr::select(rdc, -Year.Code)
# Year is not useful either
rdc <- dplyr::select(rdc, -Year)
## Unit
# For "Import Quantity", "Domestic supply quantity" & "Food", the unit is not given in the Element.
# some checks that the units are expressed in a sound way
prod_u <- rdc[rdc$Element=="Production", "Unit"] %>% unique()
import_u <- rdc[rdc$Element=="Import Quantity", "Unit"] %>% unique()
export_u <- rdc[rdc$Element=="Export Quantity", "Unit"] %>% unique()
stock_u <- rdc[rdc$Element=="Stock Variation", "Unit"] %>% unique()
dom_supply_u <- rdc[rdc$Element=="Domestic supply quantity", "Unit"] %>% unique()
food_u <- rdc[rdc$Element=="Food", "Unit"] %>% unique()
if(length(import_u) > 1 | length(dom_supply_u) > 1 | length(food_u) > 1 |
length(prod_u) > 1 | length(export_u) > 1 | length(stock_u) > 1 ){
stop("different units used within Elements")
}
if(!all.equal(import_u, dom_supply_u, food_u, prod_u, export_u, stock_u)){
stop("different units used across Elements")
}
if(import_u != "1000 tonnes"){
stop("different units used across YEARS")
}
u_less_slct <- rdc$Element %in% c("Production", "Import Quantity", "Export Quantity", "Stock Variation",
"Domestic supply quantity", "Food")
rdc[u_less_slct,] <- mutate(rdc[u_less_slct,], Element = paste0(Element, " (",Unit,")"))
rdc <- dplyr::select(rdc, -Unit)
## For the moment, do not bother Flags
rdc <- rdc[, !grepl("Flag", names(rdc))]
# Now split data by Element
unique(rdc$Element)
# "Food (1000 tonnes)" is the annual quantity available
# "Food supply quantity (kg/capita/yr)" is the annual quantity available, but divided by population
elmt_wide_ds_list <- list()
for(elmt in unique(rdc$Element)){
long_ds <- rdc[rdc$Element==elmt, c("Area", "Item", "Value")]
wide_ds <- stats::reshape(long_ds,
# varying = unique(long_ds$Item),
# v.names = c("Value"),
sep = ".",
timevar = "Item",
idvar = "Area",
direction = "wide",
new.row.names = NULL)
vars_slct <- grepl("Value.", names(wide_ds))
# those variables that have been reshaped, give the Element identifier to their names
names(wide_ds)[vars_slct] <- paste0(names(wide_ds)[vars_slct], " -- ", elmt)
# checked that " -- " is not used in names already
# any(grepl(" -- ", names(wide_ds)))
# remove "Value." part in names
names(wide_ds)[vars_slct] <- gsub("Value.", "",
x = names(wide_ds)[vars_slct])
elmt_wide_ds_list[[elmt]] <- wide_ds
}
rm(wide_ds)
# and then join them back based on country key
wide_rdc <- elmt_wide_ds_list[[1]]
for(i in 2:length(elmt_wide_ds_list)){
wide_rdc <- left_join(wide_rdc, elmt_wide_ds_list[[i]], by = "Area")
}
# Keep track of the year
wide_rdc$year <- year
wide_rdc_list[[match(year, missing_country_years)]] <- wide_rdc
}
prdc <- bind_rows(wide_rdc_list)
### MERGE RDC CONGO DATA WITH MAIN ONE
# Not as many Element*Item data rows are available, as for the global, old, food balance data (-2013).
# This prevents from row binding with panel of all countries
# Simply add the columns missing, filled with NAs
missing_col_names <- names(pfb)[!(names(pfb) %in% names(prdc))]
# (all names in rdc data are in global data)
names(prdc)[!(names(prdc) %in% names(pfb))]
missing_cols <- matrix(data = NA, ncol = length(missing_col_names), nrow = nrow(prdc))
colnames(missing_cols) <- missing_col_names
missing_cols <- as.data.frame(missing_cols)
prdc <- cbind(prdc, missing_cols)
pfb <- rbind(prdc, pfb)
# for convenience
row.names(pfb) <- dplyr::mutate(pfb, Area_year = paste0(Area, "_", year))$Area_year
#### PREPARE CONVERSION FACTORS -----------------------------------------------------------------------------------------
# Retrieve conversion factors (weights to nutritional contents), for aggregated categories, and individual commodities (main ones only)
# pfb[, names(pfb) %in% paste0(categories, " -- ","Food supply (kcal/capita/day)")] %>% head()
# pfb[, names(pfb) %in% paste0(categories, " -- ","Protein supply quantity (g/capita/day)")] %>% head()
# pfb[, names(pfb) %in% paste0(categories, " -- ","Fat supply quantity (g/capita/day)")] %>% head()
for(item in c(categories, cereals, oilcrops, vegetable_oils)){#
pfb[, paste0("kcal_per_kg -- ",item)] <- pfb[, paste0(item," -- ","Food supply (kcal/capita/day)")] * 365 /
pfb[, paste0(item," -- ","Food supply quantity (kg/capita/yr)")]
pfb[, paste0("gprot_per_kg -- ",item)] <- pfb[, paste0(item," -- ","Protein supply quantity (g/capita/day)")] * 365 /
pfb[, paste0(item," -- ","Food supply quantity (kg/capita/yr)")]
pfb[, paste0("gfat_per_kg -- ",item)] <- pfb[, paste0(item," -- ","Fat supply quantity (g/capita/day)")] * 365 /
pfb[, paste0(item," -- ","Food supply quantity (kg/capita/yr)")]
# note that the potential country-year specificity of these conversion factors is maintained - but they are missing sometimes
## NON FINITE / MISSING CONVERSION FACTORS
# First, handle Inf, due to null (0) food supply quantity (i.e. attempting to divide by 0)
pfb[is.infinite(pfb[,paste0("kcal_per_kg -- ", item)]), c(paste0("kcal_per_kg -- ", item))] <- NA
pfb[is.infinite(pfb[,paste0("gprot_per_kg -- ", item)]), c(paste0("gprot_per_kg -- ", item))] <- NA
pfb[is.infinite(pfb[,paste0("gfat_per_kg -- ", item)]), c(paste0("gfat_per_kg -- ", item))] <- NA
# There ARE missings, due to NAs in food supply (nutrient) or food supply quantity.
# This is the case for individual commodities, but also for categories, like Oilcrops
# We can impute by using the average values across years for the same country,
avg_convfact <- ddply(.data = pfb, .variables = "Area", .fun = summarise,
!!as.symbol(paste0("timeavg_kcal_per_kg -- ", item)) := mean(!!as.symbol(paste0("kcal_per_kg -- ",item)), na.rm = TRUE),
!!as.symbol(paste0("timeavg_gprot_per_kg -- ", item)) := mean(!!as.symbol(paste0("gprot_per_kg -- ",item)), na.rm = TRUE),
!!as.symbol(paste0("timeavg_gfat_per_kg -- ", item)) := mean(!!as.symbol(paste0("gfat_per_kg -- ",item)), na.rm = TRUE))
# head(avg_convfact)
# and then, taking average values across countries if the conversion factor is still missing.
for(var in names(avg_convfact)[names(avg_convfact) != "Area"]){
avg_convfact[,var][is.na(avg_convfact[,var])] <- mean(avg_convfact[,var], na.rm = TRUE)
}
# Finally, make the imputations
pfb <- left_join(pfb, avg_convfact, by = "Area")
# countries that have missings, for this item
# cntry_wmiss <- pfb[!is.finite(pfb[,paste0("kcal_per_kg -- ", item)]), c("Area")] %>% unique()
# pfb[!is.finite(pfb[,paste0("kcal_per_kg -- ", item)]), c("Area", grep("Oilcrops", names(pfb), value = TRUE))] %>% head()
pfb <- dplyr::mutate(pfb,
!!as.symbol(paste0("kcal_per_kg -- ", item)) := if_else(!is.finite(!!as.symbol(paste0("kcal_per_kg -- ", item))),
true = !!as.symbol(paste0("timeavg_kcal_per_kg -- ", item)),
false = !!as.symbol(paste0("kcal_per_kg -- ", item))),
!!as.symbol(paste0("gprot_per_kg -- ", item)) := if_else(!is.finite(!!as.symbol(paste0("gprot_per_kg -- ", item))),
true = !!as.symbol(paste0("timeavg_gprot_per_kg -- ", item)),
false = !!as.symbol(paste0("gprot_per_kg -- ", item))),
!!as.symbol(paste0("gfat_per_kg -- ", item)) := if_else(!is.finite(!!as.symbol(paste0("gfat_per_kg -- ", item))),
true = !!as.symbol(paste0("timeavg_gfat_per_kg -- ", item)),
false = !!as.symbol(paste0("gfat_per_kg -- ", item)))
)
# pfb[pfb$Area %in% cntry_wmiss, c("Area", grep("Oilcrops", names(pfb), value = TRUE))]
# for food supply and import variables, we don't impute across years or countries, this would not make much sense,
# and implied missings in annual dependency measures will be partly handled by their averaging across pre-treatment years.
}
# unique(fb$Element)
# pfbsave <- pfb
#### MAKE STATISTICS OF INTEREST ---------------------------------------------------------------------------------
### Convert imports, exports, and domestic supply into their nutrient contents (they are in 1000 tonnes and we first convert them to kg, to match conversion factors)
for(item in c(categories, cereals, oilcrops, vegetable_oils)){#
for(nutrient in c("kcal", "gprot", "gfat")){
pfb[, paste0("import_",nutrient," -- ",item)] <- pfb[, paste0(item," -- ","Import Quantity (1000 tonnes)")] * 1e6 *
pfb[, paste0(nutrient,"_per_kg -- ",item)]
pfb[, paste0("export_",nutrient," -- ",item)] <- pfb[, paste0(item," -- ","Export Quantity (1000 tonnes)")] * 1e6 *
pfb[, paste0(nutrient,"_per_kg -- ",item)]
pfb[, paste0("domsupply_",nutrient," -- ",item)] <- pfb[, paste0(item," -- ","Domestic supply quantity (1000 tonnes)")] * 1e6 *
pfb[, paste0(nutrient,"_per_kg -- ",item)]
# casing is correct here: capital Q for import and export, not for domestic supply
# And add up export and production
pfb[, paste0("gross_supply_",nutrient," -- ",item)] <- pfb[, paste0("domsupply_",nutrient," -- ",item)] +
pfb[, paste0("export_",nutrient," -- ",item)]
# pfb <- dplyr::mutate(pfb, !!as.symbol(paste0("gross_supply2_", nutrient," -- ",item)) := !!as.symbol(paste0("domsupply_",nutrient," -- ",item)) +
#                                                                                          !!as.symbol(paste0("export_",nutrient," -- ",item)) )
# all.equal(pfb[, paste0("gross_supply_",nutrient," -- ",item)], pfb[, paste0("gross_supply2_",nutrient," -- ",item)])
}
}
# pfb[,grep("Miscellaneous", names(pfb), value = TRUE)] %>% head()
### SUM OVER CATEGORIES OF ITEMS
# (this is the operation that requires converting to commodities to nutrient in the first place)
for(nutrient in c("kcal", "gprot", "gfat")){
pfb <- dplyr::mutate(pfb, !!as.symbol(paste0("import_",nutrient,"_total")) := base::rowSums(across(.cols = any_of(paste0("import_",nutrient," -- ", categories)) ), na.rm = TRUE))
pfb <- dplyr::mutate(pfb, !!as.symbol(paste0("gross_supply_",nutrient,"_total")) := base::rowSums(across(.cols = any_of(paste0("gross_supply_",nutrient," -- ", categories)) ), na.rm = TRUE))
}
# pfb <- dplyr::mutate(pfb, import_gprot_total = base::rowSums(across(.cols = any_of(paste0("gross_supply_",nutrient," -- ", categories)) ), na.rm = TRUE))
### MAKE RATIOS
# Grand Total and animal/vegetable product categories are not available for import and domestic supply directly from FAOSTAT
# Hence, we computed imports by nutrient values, so that we can then relate to nutrient supply quantities
pfb$dependency_calorie <- pfb[, paste0("import_kcal_total")] /
pfb[, paste0("gross_supply_kcal_total")]
pfb$dependency_protein <- pfb[, paste0("import_gprot_total")] /
pfb[, paste0("gross_supply_gprot_total")]
pfb$dependency_fat <- pfb[, paste0("import_gfat_total")] /
pfb[, paste0("gross_supply_gfat_total")]
summary(pfb$dependency_calorie)
# Dependency through some selected crops
for(item in selected_items){
pfb[, paste0("dependency_calorie -- ",item)] <- pfb[, paste0("import_kcal -- ",item)] /
pfb[, "gross_supply_kcal_total"]
pfb[, paste0("dependency_protein -- ",item)] <- pfb[, paste0("import_gprot -- ",item)] /
pfb[, "gross_supply_gprot_total"]
pfb[, paste0("dependency_fat -- ",item)] <- pfb[, paste0("import_gfat -- ",item)] /
pfb[, "gross_supply_gfat_total"]
}
csfb5 <- ddply(pfb, "Area", summarise,
# Main dependency variables:
dependency_calorie = mean(dependency_calorie, na.rm = TRUE),
dependency_protein = mean(dependency_protein, na.rm = TRUE),
dependency_fat = mean(dependency_fat, na.rm = TRUE),
# import, total:
import_kcal_total = mean(import_kcal_total, na.rm = TRUE),
import_gprot_total = mean(import_gprot_total, na.rm = TRUE),
import_gfat_total = mean(import_gfat_total, na.rm = TRUE),
# gross supply, total:
gross_supply_kcal_total = mean(gross_supply_kcal_total, na.rm = TRUE),
gross_supply_gprot_total = mean(gross_supply_gprot_total, na.rm = TRUE),
gross_supply_gfat_total = mean(gross_supply_gfat_total, na.rm = TRUE),
# Dependency through specific crops
!!as.symbol("dependency_calorie -- Cereals - Excluding Beer") := mean(!!as.symbol("dependency_calorie -- Cereals - Excluding Beer"), na.rm = TRUE),
!!as.symbol("dependency_calorie -- Wheat and products") := mean(!!as.symbol("dependency_calorie -- Wheat and products"), na.rm = TRUE),
!!as.symbol("dependency_calorie -- Rice (Milled Equivalent)") := mean(!!as.symbol("dependency_calorie -- Rice (Milled Equivalent)"), na.rm = TRUE),
!!as.symbol("dependency_calorie -- Barley and products") := mean(!!as.symbol("dependency_calorie -- Barley and products"), na.rm = TRUE),
!!as.symbol("dependency_calorie -- Maize and products") := mean(!!as.symbol("dependency_calorie -- Maize and products"), na.rm = TRUE),
!!as.symbol("dependency_calorie -- Soyabeans") := mean(!!as.symbol("dependency_calorie -- Soyabeans"), na.rm = TRUE),
!!as.symbol("dependency_calorie -- Vegetable Oils") := mean(!!as.symbol("dependency_calorie -- Vegetable Oils"), na.rm = TRUE),
!!as.symbol("dependency_calorie -- Soyabean Oil") := mean(!!as.symbol("dependency_calorie -- Soyabean Oil"), na.rm = TRUE),
!!as.symbol("dependency_calorie -- Sunflowerseed Oil") := mean(!!as.symbol("dependency_calorie -- Sunflowerseed Oil"), na.rm = TRUE),
!!as.symbol("dependency_calorie -- Rape and Mustard Oil") := mean(!!as.symbol("dependency_calorie -- Rape and Mustard Oil"), na.rm = TRUE),
!!as.symbol("dependency_calorie -- Palm Oil") := mean(!!as.symbol("dependency_calorie -- Palm Oil"), na.rm = TRUE),
# import of specific crops
!!as.symbol("import_kcal -- Cereals - Excluding Beer") := mean(!!as.symbol("import_kcal -- Cereals - Excluding Beer"), na.rm = TRUE),
!!as.symbol("import_kcal -- Wheat and products") := mean(!!as.symbol("import_kcal -- Wheat and products"), na.rm = TRUE),
!!as.symbol("import_kcal -- Rice (Milled Equivalent)") := mean(!!as.symbol("import_kcal -- Rice (Milled Equivalent)"), na.rm = TRUE),
!!as.symbol("import_kcal -- Barley and products") := mean(!!as.symbol("import_kcal -- Barley and products"), na.rm = TRUE),
!!as.symbol("import_kcal -- Maize and products") := mean(!!as.symbol("import_kcal -- Maize and products"), na.rm = TRUE),
!!as.symbol("import_kcal -- Soyabeans") := mean(!!as.symbol("import_kcal -- Soyabeans"), na.rm = TRUE),
!!as.symbol("import_kcal -- Vegetable Oils") := mean(!!as.symbol("import_kcal -- Vegetable Oils"), na.rm = TRUE),
!!as.symbol("import_kcal -- Soyabean Oil") := mean(!!as.symbol("import_kcal -- Soyabean Oil"), na.rm = TRUE),
!!as.symbol("import_kcal -- Sunflowerseed Oil") := mean(!!as.symbol("import_kcal -- Sunflowerseed Oil"), na.rm = TRUE),
!!as.symbol("import_kcal -- Rape and Mustard Oil") := mean(!!as.symbol("import_kcal -- Rape and Mustard Oil"), na.rm = TRUE),
!!as.symbol("import_kcal -- Palm Oil") := mean(!!as.symbol("import_kcal -- Palm Oil"), na.rm = TRUE),
# gross supply of specific crops
!!as.symbol("gross_supply_kcal -- Cereals - Excluding Beer") := mean(!!as.symbol("gross_supply_kcal -- Cereals - Excluding Beer"), na.rm = TRUE),
!!as.symbol("gross_supply_kcal -- Wheat and products") := mean(!!as.symbol("gross_supply_kcal -- Wheat and products"), na.rm = TRUE),
!!as.symbol("gross_supply_kcal -- Rice (Milled Equivalent)") := mean(!!as.symbol("gross_supply_kcal -- Rice (Milled Equivalent)"), na.rm = TRUE),
!!as.symbol("gross_supply_kcal -- Barley and products") := mean(!!as.symbol("gross_supply_kcal -- Barley and products"), na.rm = TRUE),
!!as.symbol("gross_supply_kcal -- Maize and products") := mean(!!as.symbol("gross_supply_kcal -- Maize and products"), na.rm = TRUE),
!!as.symbol("gross_supply_kcal -- Soyabeans") := mean(!!as.symbol("gross_supply_kcal -- Soyabeans"), na.rm = TRUE),
!!as.symbol("gross_supply_kcal -- Vegetable Oils") := mean(!!as.symbol("gross_supply_kcal -- Vegetable Oils"), na.rm = TRUE),
!!as.symbol("gross_supply_kcal -- Soyabean Oil") := mean(!!as.symbol("gross_supply_kcal -- Soyabean Oil"), na.rm = TRUE),
!!as.symbol("gross_supply_kcal -- Sunflowerseed Oil") := mean(!!as.symbol("gross_supply_kcal -- Sunflowerseed Oil"), na.rm = TRUE),
!!as.symbol("gross_supply_kcal -- Rape and Mustard Oil") := mean(!!as.symbol("gross_supply_kcal -- Rape and Mustard Oil"), na.rm = TRUE),
!!as.symbol("gross_supply_kcal -- Palm Oil") := mean(!!as.symbol("gross_supply_kcal -- Palm Oil"), na.rm = TRUE),
# conversion factors, for some major items:
!!as.symbol("kcal_per_kg -- Cereals - Excluding Beer") := mean(!!as.symbol("kcal_per_kg -- Cereals - Excluding Beer"), na.rm = TRUE),
!!as.symbol("gprot_per_kg -- Cereals - Excluding Beer") := mean(!!as.symbol("gprot_per_kg -- Cereals - Excluding Beer"), na.rm = TRUE),
!!as.symbol("gfat_per_kg -- Cereals - Excluding Beer") := mean(!!as.symbol("gfat_per_kg -- Cereals - Excluding Beer"), na.rm = TRUE),
!!as.symbol("kcal_per_kg -- Vegetable Oils") := mean(!!as.symbol("kcal_per_kg -- Vegetable Oils"), na.rm = TRUE),
!!as.symbol("gprot_per_kg -- Meat") := mean(!!as.symbol("gprot_per_kg -- Meat"), na.rm = TRUE),
!!as.symbol("gprot_per_kg -- Fish, Seafood") := mean(!!as.symbol("gprot_per_kg -- Fish, Seafood"), na.rm = TRUE),
!!as.symbol("gfat_per_kg -- Vegetable Oils") := mean(!!as.symbol("gfat_per_kg -- Vegetable Oils"), na.rm = TRUE)
)
# alternatively, average over the two most recent years only
csfb2 <- ddply(pfb[pfb$year == 2004 | pfb$year == 2005 | pfb$year == 2010 | pfb$year == 2011,],
"Area",
summarise,
# Main dependency variables:
dependency_calorie = mean(dependency_calorie, na.rm = TRUE),
dependency_protein = mean(dependency_protein, na.rm = TRUE),
dependency_fat = mean(dependency_fat, na.rm = TRUE),
# import, total:
import_kcal_total = mean(import_kcal_total, na.rm = TRUE),
import_gprot_total = mean(import_gprot_total, na.rm = TRUE),
import_gfat_total = mean(import_gfat_total, na.rm = TRUE),
# gross supply, total:
gross_supply_kcal_total = mean(gross_supply_kcal_total, na.rm = TRUE),
gross_supply_gprot_total = mean(gross_supply_gprot_total, na.rm = TRUE),
gross_supply_gfat_total = mean(gross_supply_gfat_total, na.rm = TRUE),
# Dependency through specific crops
!!as.symbol("dependency_calorie -- Cereals - Excluding Beer") := mean(!!as.symbol("dependency_calorie -- Cereals - Excluding Beer"), na.rm = TRUE),
!!as.symbol("dependency_calorie -- Wheat and products") := mean(!!as.symbol("dependency_calorie -- Wheat and products"), na.rm = TRUE),
!!as.symbol("dependency_calorie -- Rice (Milled Equivalent)") := mean(!!as.symbol("dependency_calorie -- Rice (Milled Equivalent)"), na.rm = TRUE),
!!as.symbol("dependency_calorie -- Barley and products") := mean(!!as.symbol("dependency_calorie -- Barley and products"), na.rm = TRUE),
!!as.symbol("dependency_calorie -- Maize and products") := mean(!!as.symbol("dependency_calorie -- Maize and products"), na.rm = TRUE),
!!as.symbol("dependency_calorie -- Soyabeans") := mean(!!as.symbol("dependency_calorie -- Soyabeans"), na.rm = TRUE),
!!as.symbol("dependency_calorie -- Vegetable Oils") := mean(!!as.symbol("dependency_calorie -- Vegetable Oils"), na.rm = TRUE),
!!as.symbol("dependency_calorie -- Soyabean Oil") := mean(!!as.symbol("dependency_calorie -- Soyabean Oil"), na.rm = TRUE),
!!as.symbol("dependency_calorie -- Sunflowerseed Oil") := mean(!!as.symbol("dependency_calorie -- Sunflowerseed Oil"), na.rm = TRUE),
!!as.symbol("dependency_calorie -- Rape and Mustard Oil") := mean(!!as.symbol("dependency_calorie -- Rape and Mustard Oil"), na.rm = TRUE),
!!as.symbol("dependency_calorie -- Palm Oil") := mean(!!as.symbol("dependency_calorie -- Palm Oil"), na.rm = TRUE),
# import of specific crops
!!as.symbol("import_kcal -- Cereals - Excluding Beer") := mean(!!as.symbol("import_kcal -- Cereals - Excluding Beer"), na.rm = TRUE),
!!as.symbol("import_kcal -- Wheat and products") := mean(!!as.symbol("import_kcal -- Wheat and products"), na.rm = TRUE),
!!as.symbol("import_kcal -- Rice (Milled Equivalent)") := mean(!!as.symbol("import_kcal -- Rice (Milled Equivalent)"), na.rm = TRUE),
!!as.symbol("import_kcal -- Barley and products") := mean(!!as.symbol("import_kcal -- Barley and products"), na.rm = TRUE),
!!as.symbol("import_kcal -- Maize and products") := mean(!!as.symbol("import_kcal -- Maize and products"), na.rm = TRUE),
!!as.symbol("import_kcal -- Soyabeans") := mean(!!as.symbol("import_kcal -- Soyabeans"), na.rm = TRUE),
!!as.symbol("import_kcal -- Vegetable Oils") := mean(!!as.symbol("import_kcal -- Vegetable Oils"), na.rm = TRUE),
!!as.symbol("import_kcal -- Soyabean Oil") := mean(!!as.symbol("import_kcal -- Soyabean Oil"), na.rm = TRUE),
!!as.symbol("import_kcal -- Sunflowerseed Oil") := mean(!!as.symbol("import_kcal -- Sunflowerseed Oil"), na.rm = TRUE),
!!as.symbol("import_kcal -- Rape and Mustard Oil") := mean(!!as.symbol("import_kcal -- Rape and Mustard Oil"), na.rm = TRUE),
!!as.symbol("import_kcal -- Palm Oil") := mean(!!as.symbol("import_kcal -- Palm Oil"), na.rm = TRUE),
# gross supply of specific crops
!!as.symbol("gross_supply_kcal -- Cereals - Excluding Beer") := mean(!!as.symbol("gross_supply_kcal -- Cereals - Excluding Beer"), na.rm = TRUE),
!!as.symbol("gross_supply_kcal -- Wheat and products") := mean(!!as.symbol("gross_supply_kcal -- Wheat and products"), na.rm = TRUE),
!!as.symbol("gross_supply_kcal -- Rice (Milled Equivalent)") := mean(!!as.symbol("gross_supply_kcal -- Rice (Milled Equivalent)"), na.rm = TRUE),
!!as.symbol("gross_supply_kcal -- Barley and products") := mean(!!as.symbol("gross_supply_kcal -- Barley and products"), na.rm = TRUE),
!!as.symbol("gross_supply_kcal -- Maize and products") := mean(!!as.symbol("gross_supply_kcal -- Maize and products"), na.rm = TRUE),
!!as.symbol("gross_supply_kcal -- Soyabeans") := mean(!!as.symbol("gross_supply_kcal -- Soyabeans"), na.rm = TRUE),
!!as.symbol("gross_supply_kcal -- Vegetable Oils") := mean(!!as.symbol("gross_supply_kcal -- Vegetable Oils"), na.rm = TRUE),
!!as.symbol("gross_supply_kcal -- Soyabean Oil") := mean(!!as.symbol("gross_supply_kcal -- Soyabean Oil"), na.rm = TRUE),
!!as.symbol("gross_supply_kcal -- Sunflowerseed Oil") := mean(!!as.symbol("gross_supply_kcal -- Sunflowerseed Oil"), na.rm = TRUE),
!!as.symbol("gross_supply_kcal -- Rape and Mustard Oil") := mean(!!as.symbol("gross_supply_kcal -- Rape and Mustard Oil"), na.rm = TRUE),
!!as.symbol("gross_supply_kcal -- Palm Oil") := mean(!!as.symbol("gross_supply_kcal -- Palm Oil"), na.rm = TRUE),
# conversion factors, for some major items:
!!as.symbol("kcal_per_kg -- Cereals - Excluding Beer") := mean(!!as.symbol("kcal_per_kg -- Cereals - Excluding Beer"), na.rm = TRUE),
!!as.symbol("gprot_per_kg -- Cereals - Excluding Beer") := mean(!!as.symbol("gprot_per_kg -- Cereals - Excluding Beer"), na.rm = TRUE),
!!as.symbol("gfat_per_kg -- Cereals - Excluding Beer") := mean(!!as.symbol("gfat_per_kg -- Cereals - Excluding Beer"), na.rm = TRUE),
!!as.symbol("kcal_per_kg -- Vegetable Oils") := mean(!!as.symbol("kcal_per_kg -- Vegetable Oils"), na.rm = TRUE),
!!as.symbol("gprot_per_kg -- Meat") := mean(!!as.symbol("gprot_per_kg -- Meat"), na.rm = TRUE),
!!as.symbol("gprot_per_kg -- Fish, Seafood") := mean(!!as.symbol("gprot_per_kg -- Fish, Seafood"), na.rm = TRUE),
!!as.symbol("gfat_per_kg -- Vegetable Oils") := mean(!!as.symbol("gfat_per_kg -- Vegetable Oils"), na.rm = TRUE)
)
summary(csfb5$dependency_calorie)
summary(csfb5$dependency_protein)
summary(csfb5$dependency_fat)
head(csfb5)
saveRDS(csfb5, file = here("temp_data", "exposure", "dependency_5ya.Rdata"))
saveRDS(csfb2, file = here("temp_data", "exposure", "dependency_2ya.Rdata"))
saveRDS(csfb5, file = here("temp_data", "exposures", "dependency_5ya.Rdata"))
saveRDS(csfb2, file = here("temp_data", "exposures", "dependency_2ya.Rdata"))
dependency_5ya <- readRDS(here("temp_data", "exposures", "dependency_5ya.Rdata"))
exposures_list <- list()
exposures_list[["dependency_5ya"]] <- readRDS(here("temp_data", "exposures", "dependency_5ya.Rdata"))
exposures_list[["dependency_2ya"]] <- readRDS(here("temp_data", "exposures", "dependency_2ya.Rdata"))
