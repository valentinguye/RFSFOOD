dir.create(here("temp_data","country_nourishment", recursive = TRUE))
dir.create(here("temp_data"))
dir.create(here("temp_data","country_nourishment"))
?read.csv
global_food <- read.csv("input_data", "global-food.csv")
global_food <- read.csv(here("input_data", "global-food.csv"))
global_food
names(global_food)
unique(global_food$Product)
cereals <- read.csv(here("input_data", "per-capita-consumption-of-cereals-by-commodity-type-daily-kilocalories.csv"))
cereals
names(cereals)
unique(cereal$Entity)
unique(cereals$Entity)
names(cereals)
names(cereals) <- c("Entity", "Code", "year",
"oat_kcal_cpt_day",
"oat_kcal_cpt_day",
"oat_kcal_cpt_day",
"oat_kcal_cpt_day",)
names(cereals) <- c("Entity", "Code", "year",
"oat_kcal_cpt_day",
"rye_kcal_cpt_day",
"barley_kcal_cpt_day",
"sorghum_kcal_cpt_day",
"maize_kcal_cpt_day",
"wheat_kcal_cpt_day",
"rice_kcal_cpt_day")
cereals <- mutate(cereals, cereal_kcal_cpt_day = sum(oat_kcal_cpt_day,
rye_kcal_cpt_day,
barley_kcal_cpt_day,
sorghum_kcal_cpt_day,
maize_kcal_cpt_day,
wheat_kcal_cpt_day,
rice_kcal_cpt_day))
head(cereals)
cereals <- mutate(cereals, cereal_kcal_cpt_day = sum(oat_kcal_cpt_day,
rye_kcal_cpt_day,
barley_kcal_cpt_day,
sorghum_kcal_cpt_day,
maize_kcal_cpt_day,
wheat_kcal_cpt_day,
rice_kcal_cpt_day), na.rm = TRUE)
head(cereals)
cereals <- mutate(cereals, cereal_kcal_cpt_day = sum(c(oat_kcal_cpt_day,
rye_kcal_cpt_day,
barley_kcal_cpt_day,
sorghum_kcal_cpt_day,
maize_kcal_cpt_day,
wheat_kcal_cpt_day,
rice_kcal_cpt_day), na.rm = TRUE))
head(cereals)
?roSums
?rowSums
#### SUPPLY OF CEREAL KCAL / CAPITA / DAY ####
cereals <- read.csv(here("input_data", "per-capita-consumption-of-cereals-by-commodity-type-daily-kilocalories.csv"))
# Variable names are "Food Balance Sheets: Oats - Food supply (kcal/capita/day) (FAO (2017))"
# with the cereal taking values: Oats, Rye and products, Barley and products, Sorghum and products, Maize and products, Wheat and products, Rice Milled Equivalent
# They re all expressed in kcal/capita/day.
names(cereals)
unique(cereals$Entity)
names(cereals) <- c("Entity", "Code", "year",
"oat_kcal_cpt_day",
"rye_kcal_cpt_day",
"barley_kcal_cpt_day",
"sorghum_kcal_cpt_day",
"maize_kcal_cpt_day",
"wheat_kcal_cpt_day",
"rice_kcal_cpt_day")
cereals <- mutate(cereals, cereal_kcal_cpt_day = rowSums(across(.cols = contains("kcal_cpt_day"))))
head(cereals)
#### SUPPLY OF CEREAL KCAL / CAPITA / DAY ####
cereals <- read.csv(here("input_data", "per-capita-consumption-of-cereals-by-commodity-type-daily-kilocalories.csv"))
# Variable names are "Food Balance Sheets: Oats - Food supply (kcal/capita/day) (FAO (2017))"
# with the cereal taking values: Oats, Rye and products, Barley and products, Sorghum and products, Maize and products, Wheat and products, Rice Milled Equivalent
# They re all expressed in kcal/capita/day.
names(cereals)
unique(cereals$Entity)
names(cereals) <- c("Entity", "Code", "year",
"oat_kcal_cpt_day",
"rye_kcal_cpt_day",
"barley_kcal_cpt_day",
"sorghum_kcal_cpt_day",
"maize_kcal_cpt_day",
"wheat_kcal_cpt_day",
"rice_kcal_cpt_day")
cereals <- mutate(cereals, cereal_kcal_cpt_day = rowSums(across(.cols = contains("kcal_cpt_day"))), na.rm = TRUE)
head(cereals)
cereals <- read.csv(here("input_data", "per-capita-consumption-of-cereals-by-commodity-type-daily-kilocalories.csv"))
# Variable names are "Food Balance Sheets: Oats - Food supply (kcal/capita/day) (FAO (2017))"
# with the cereal taking values: Oats, Rye and products, Barley and products, Sorghum and products, Maize and products, Wheat and products, Rice Milled Equivalent
# They re all expressed in kcal/capita/day.
names(cereals)
unique(cereals$Entity)
names(cereals) <- c("Entity", "Code", "year",
"oat_kcal_cpt_day",
"rye_kcal_cpt_day",
"barley_kcal_cpt_day",
"sorghum_kcal_cpt_day",
"maize_kcal_cpt_day",
"wheat_kcal_cpt_day",
"rice_kcal_cpt_day")
cereals <- mutate(cereals, cereal_kcal_cpt_day = rowSums(across(.cols = contains("kcal_cpt_day")), na.rm = TRUE))
head(cereals)
### PACKAGES ###
# see this project's README for a better understanding of how packages are handled in this project.
# These are the packages needed in this particular script. *** these are those that we now not install: "rlist","lwgeom","htmltools", "iterators",
neededPackages <- c("data.table", "plyr", "tidyr", "dplyr",  "Hmisc", "sjmisc", "stringr",
"here", "readstata13", "foreign", "readxl", "writexl",
"knitr", "kableExtra",
"DataCombine",
"fixest",
"boot", "fwildclusterboot", "sandwich",
"ggplot2", "dotwhisker")
# Install them in their project-specific versions
renv::restore(packages = neededPackages)
# Load them
lapply(neededPackages, library, character.only = TRUE)
# /!\/!\ IF renv::restore(neededPackages) FAILS TO INSTALL SOME PACKAGES /!\/!\
# For instance sf could cause trouble https://github.com/r-spatial/sf/issues/921
# or magick, as a dependency of raster and rgdal.
# FOLLOW THESE STEPS:
# 1. Remove these package names from neededPackages above, and rerun renv::restore(packages = neededPackages)
# 2. Write them in troublePackages below, uncomment, and run the following code chunk:
# # /!\ THIS BREAKS THE PROJECT REPRODUCIBILITY GUARANTY /!\
# troublePackages <- c()
# # Attempt to load packages from user's default libraries.
# lapply(troublePackages, library, lib.loc = default_libraries, character.only = TRUE)
# 3. If the troubling packages could not be loaded ("there is no package called ...")
#   you should try to install them, preferably in their versions stated in the renv.lock file.
#   see in particular https://rstudio.github.io/renv/articles/renv.html
# # # /!\ THIS BREAKS THE PROJECT REPRODUCIBILITY GUARANTY /!\
# troublePackages <- c("leaflet", "leaflet.providers", "png")
# # Attempt to load packages from user's default libraries.
# lapply(troublePackages, library, lib.loc = default_libraries, character.only = TRUE)
### WORKING DIRECTORY SHOULD BE CORRECT IF THIS SCRIPT IS RUN WITHIN R_project_for_individual_runs
### OR CALLED FROM LUCFP PROJECT master.do FILE.
### IN ANY CASE IT SHOULD BE (~/LUCFP/data_processing
### NEW FOLDERS USED IN THIS SCRIPT
dir.create(here("temp_data"))
dir.create(here("temp_data","country_nourishment"))
year <- 2001
fb <- read.csv(here("input_data", "exposure_variables", paste0("FAOSTAT_",year,"_allcountries_foodbalances_aggritems.csv")))
head(fb)
?read.csv
names(fb)
readxl::read.csv
?readxl::read.csv
?readxl::read_csv
?readxl::readcsv
?readxl
names[fb][1] <- "Domain.Code"
names(fb)[1] <- "Domain.Code"
names(fb)
class(fb)
unique(fb$Domain
)
unique(fb$Element)
unique(fb$Item)
length(unique(fb$Item)) == length(unique(fb$Item.Code))
length(unique(fb$Item.Code))
length(unique(fb$Item))
fb[fb$Item=="Grand Total"]
fb[fb$Item=="Grand Total",]
unique(fb$Flag.Description)
length(unique(fb$Area)) == length(unique(fb$Area.Code))
unique(fb$Item.Code)
length(unique(fb$Item.Code))
spot_doublones <- sapply(fb$Item, function(itm){itm_length <- fb[fb$Item==itm,"Item.Code"] %>% unique() %>% length()
itm_spot <- if_else(itm_length > 1, true = itm, false = "")
return(itm_spot) })
spot_doublones <- sapply(unique(fb$Item), function(itm){itm_length <- fb[fb$Item==itm,"Item.Code"] %>% unique() %>% length()
itm_spot <- if_else(itm_length > 1, true = itm, false = "")
return(itm_spot) })
spot_doublones
spot_doublones[spot_doublones != ""]
fb[fb$Item == "Eggs","Item.Code"]
fb[fb$Item == "Eggs","Item.Code"] %>% unique()
fb[fb$Item == "Eggs","Item.Code"] %>% mode()
fb[fb$Item == "Eggs","Item.Code"] %>% class()
fb[fb$Item == "Eggs","Item.Code"] %>% mode()
fb[fb$Item == "Miscellaneous","Item.Code"] %>% unique()
fb[fb$Item == "Milk - Excluding Butter","Item.Code"] %>% unique()
fb[fb$Item == "Eggs",]
fb[fb$Item == "Miscellaneous",]
?duplicated
fb[fb$Item == "Miscellaneous",] %>% head()
unique(fb$Domain)
fb <- read.csv(here("input_data", "exposure_variables", paste0("FAOSTAT_",year,"_allcountries_foodbalances_aggritems.csv")))
# the first row names gets weird "ï.." prefixe
# names(fb)[1] <- "Domain.Code"
# the domain is the common to the whole data set "Food Balances (-2013, old methodology and population)" so we can remove it
unique(fb$Domain)
fb <- fb[, grepl("Domain", names(fb))]
head(fb)
fb <- read.csv(here("input_data", "exposure_variables", paste0("FAOSTAT_",year,"_allcountries_foodbalances_aggritems.csv")))
# the first row names gets weird "ï.." prefixe
# names(fb)[1] <- "Domain.Code"
# the domain is the common to the whole data set "Food Balances (-2013, old methodology and population)" so we can remove it
unique(fb$Domain)
fb <- fb[, !grepl("Domain", names(fb))]
head(fb)
length(unique(fb$Element)) == length(unique(fb$Element.Code))
fb <- dplyr::select(fb, -Area.Code)
duplicated(fb[,c("Area.Code", "Area", "Element.Code", "Element", "Item.Code", "Code", "Item")])
head(fb)
fb <- dplyr::select(fb, -Element.Code)
fb <- dplyr::select(fb, -Element.Code)
head(fb)
fb[!duplicated(fb[,c("Area", "Element", "Item")]), ]
fb[duplicated(fb[,c("Area", "Element", "Item")]), ]
fb[duplicated(fb[,c("Area", "Element", "Item")]), ] %>% nrow()
fb <- fb[!duplicated(fb[,c("Area", "Element", "Item")]), ]
length(unique(fb$Item)) == length(unique(fb$Item.Code))
?stop
stop(length(unique(fb$Item)) == length(unique(fb$Item.Code)))
length(unique(fb$Item)) == length(unique(fb$Item.Code))
if(!(length(unique(fb$Item)) == length(unique(fb$Item.Code)))){
stop()
}
stop()
fb <- dplyr::select(fb, -Item.Code)
head(fb)
fb <- dplyr::select(fb, -Year.Code)
unique(fb$Year)
fb[fb$Element=="Food", ]
fb[fb$Element=="Import Quantity", ]
fb[fb$Element=="Import Quantity", ] %>% head()
fb[fb$Element=="Food", "Unit"] %>% unique()
fb[fb$Element=="Domestic supply quantity", "Unit"] %>% unique()
fb[fb$Element=="Import Quantity", "Unit"] %>% unique()
fb[fb$Element=="Domestic supply quantity", "Unit"] %>% unique()
fb[fb$Element=="Food", "Unit"] %>% unique()
dom_supply_u
import_u <- fb[fb$Element=="Import Quantity", "Unit"] %>% unique()
dom_supply_u <- fb[fb$Element=="Domestic supply quantity", "Unit"] %>% unique()
food_u <- fb[fb$Element=="Food", "Unit"] %>% unique()
if(length(import_u) > 1 | length(dom_supply_u) > 1 | length(food_u) > 1 ){
stop("different units used within Elements")
}
if(!all.equal(import_u, dom_supply_u, food_u)){
stop("different units used across Elements")
}
import_u <- fb[fb$Element=="Import Quantity", "Unit"] %>% unique()
dom_supply_u <- fb[fb$Element=="Domestic supply quantity", "Unit"] %>% unique()
food_u <- fb[fb$Element=="Food", "Unit"] %>% unique()
if(length(import_u) > 1 | length(dom_supply_u) > 1 | length(food_u) > 1 ){
stop("different units used within Elements")
}
if(!all.equal(import_u, dom_supply_u, food_u)){
stop("different units used across Elements")
}
# merge
fb[fb$Item=="Grand Total",]
unique(fb$Flag.Description)
}
names(fb)
import_u
head(fb)
fb[fb$Element %in% c("Import Quantity", "Domestic supply quantity", "Food"),]
unitless_slct <- fb$Element %in% c("Import Quantity", "Domestic supply quantity", "Food")
unitless_slct
u_less_slct <- fb$Element %in% c("Import Quantity", "Domestic supply quantity", "Food")
head(fb)
mutate(fb[u_less_slct,], Element = paste0(Element, " ", Unit))
fb[u_less_slct,] <- mutate(fb[u_less_slct,], Element = paste0(Element, " (",Unit,")"))
head(fb)
fb <- read.csv(here("input_data", "exposure_variables", paste0("FAOSTAT_",year,"_allcountries_foodbalances_aggritems.csv")))
# the first row names gets weird "ï.." prefixe
# names(fb)[1] <- "Domain.Code"
# the domain is the common to the whole data set "Food Balances (-2013, old methodology and population)" so we can remove it
unique(fb$Domain)
fb <- fb[, !grepl("Domain", names(fb))]
## Area and area code are bijective
length(unique(fb$Area)) == length(unique(fb$Area.Code))
fb <- dplyr::select(fb, -Area.Code)
## Element
unique(fb$Element)
# "Food supply (kcal/capita/day)"
# "Protein supply quantity (g/capita/day)"
# "Fat supply quantity (g/capita/day)"
# "Import Quantity"
# "Domestic supply quantity"
# "Food"
# "Food supply quantity (kg/capita/yr)"
# Element and Element.Code are bijective
length(unique(fb$Element)) == length(unique(fb$Element.Code))
fb <- dplyr::select(fb, -Element.Code)
## Item
unique(fb$Item)
# there are some Items that have more than one Item.Code
length(unique(fb$Item)) == length(unique(fb$Item.Code))
spot_doublones <- sapply(unique(fb$Item), function(itm){itm_length <- fb[fb$Item==itm,"Item.Code"] %>% unique() %>% length()
itm_spot <- if_else(itm_length > 1, true = itm, false = "")
return(itm_spot) })
spot_doublones[spot_doublones != ""]
fb[fb$Item == "Eggs","Item.Code"] %>% unique()
fb[fb$Item == "Milk - Excluding Butter","Item.Code"] %>% unique()
fb[fb$Item == "Miscellaneous","Item.Code"] %>% unique()
fb[fb$Item == "Eggs",]
fb[fb$Item == "Miscellaneous",]
# they seem to be the same figures, or almost, but with different Flags (not always) --> let's keep only one instance
# Items with several item codes are duplicates (within the same country and Element)
fb[duplicated(fb[,c("Area", "Element", "Item")]), ] %>% nrow() # 2951 obs. in 2001
# we want those that are not duplicates
fb <- fb[!duplicated(fb[,c("Area", "Element", "Item")]), ]
if(!(length(unique(fb$Item)) == length(unique(fb$Item.Code)))){
stop("there are still duplicates in Item variable")
}
fb <- dplyr::select(fb, -Item.Code)
## Year
fb <- dplyr::select(fb, -Year.Code)
## Unit
# For "Import Quantity", "Domestic supply quantity" & "Food", the unit is not given in the Element.
# some checks that the units are expressed in a sound way
import_u <- fb[fb$Element=="Import Quantity", "Unit"] %>% unique()
dom_supply_u <- fb[fb$Element=="Domestic supply quantity", "Unit"] %>% unique()
food_u <- fb[fb$Element=="Food", "Unit"] %>% unique()
if(length(import_u) > 1 | length(dom_supply_u) > 1 | length(food_u) > 1 ){
stop("different units used within Elements")
}
if(!all.equal(import_u, dom_supply_u, food_u)){
stop("different units used across Elements")
}
if(import_u != "1000 tonnes"){
stop("different units used across YEARS")
}
u_less_slct <- fb$Element %in% c("Import Quantity", "Domestic supply quantity", "Food")
fb[u_less_slct,] <- mutate(fb[u_less_slct,], Element = paste0(Element, " (",Unit,")"))
fb <- dplyr::select(fb, -Unit)
## As of now, do not bother Flags
fb <- fb[, !grepl("Flag", names(fb))]
head(fb)
?reshape
Food_s_gcapday <- fb[fb$Element=="Food supply (kcal/capita/day)", c("Area", "Item", "Value")]
unique(fb$Element)
food_s_kcalcapday <- fb[fb$Element=="Food supply (kcal/capita/day)", c("Area", "Item", "Value")]
prot_s_gcapday <- fb[fb$Element=="Protein supply quantity (g/capita/day)", c("Area", "Item", "Value")]
fat_s_gcapday <- fb[fb$Element=="Fat supply quantity (g/capita/day)", c("Area", "Item", "Value")]
import_kt <- fb[fb$Element=="Import Quantity (1000 tonnes)", c("Area", "Item", "Value")]
dom_s_kt <- fb[fb$Element=="Domestic supply quantity (1000 tonnes)", c("Area", "Item", "Value")]
food_kt <- fb[fb$Element=="Food (1000 tonnes)", c("Area", "Item", "Value")]
food_s_kgcapyr <- fb[fb$Element=="Food supply quantity (kg/capita/yr)", c("Area", "Item", "Value")]
unique(fb$Element)
elmt_ds_list <- list()
for(elmt in unique(fb$Element)){
elmt_ds_list[[elmt]] <- fb[fb$Element==elmt, c("Area", "Item", "Value")]
}
names(elmt_ds_list)
elmt_ds_list[[elmt]]
elmt_ds_list[[elmt]] %>% head()
long_ds <- elmt_ds_list[[elmt]]
wide_ds <- stats::reshape(long_ds,
varying = "Value",
# v.names = c("Item"),
sep = ".",
timevar = "Item",
idvar = "Area",
direction = "wide",
new.row.names = NULL)
wide_ds <- stats::reshape(long_ds,
varying = list(c("Value")),
# v.names = c("Item"),
sep = ".",
timevar = "Item",
idvar = "Area",
direction = "wide",
new.row.names = NULL)
wide_ds <- stats::reshape(long_ds,
# varying = c("Value"),
# v.names = c("Item"),
sep = ".",
timevar = "Item",
idvar = "Area",
direction = "wide",
new.row.names = NULL)
head(wide_ds)
names(long_ds)
wide_ds <- stats::reshape(long_ds,
varying = unique(long_ds$Item),
# v.names = c("Item"),
sep = ".",
timevar = "Item",
idvar = "Area",
direction = "wide",
new.row.names = NULL)
length(unique(long_ds$Item))
wide_ds <- stats::reshape(long_ds,
# varying = unique(long_ds$Item),
v.names = c("Value"),
sep = ".",
timevar = "Item",
idvar = "Area",
direction = "wide",
new.row.names = NULL)
wide_ds
wide_ds <- stats::reshape(long_ds,
varying = unique(long_ds$Item),
v.names = c("Value"),
sep = ".",
timevar = "Item",
idvar = "Area",
direction = "wide",
new.row.names = NULL)
wide_ds1 <- stats::reshape(long_ds,
# varying = unique(long_ds$Item),
# v.names = c("Value"),
sep = ".",
timevar = "Item",
idvar = "Area",
direction = "wide",
new.row.names = NULL)
all.equal(wide_ds, wide_ds1)
class(wide_ds)
class(wide_ds1)
head(wide_ds)
head(wide_ds1)
names(wide_ds)[grepl("Value.", names(wide_ds))]
gsub("Value", "",
x = names(wide_ds)[grepl("Value.", names(wide_ds))])
gsub("Value.", "",
x = names(wide_ds)[grepl("Value.", names(wide_ds))])
elmt_ds_list <- list()
for(elmt in unique(fb$Element)){
elmt_ds_list[[elmt]] <- fb[fb$Element==elmt, c("Area", "Item", "Value")]
}
## RESHAPE
elmt_wide_ds_list <- lapply(elmt_ds_list,
FUN = function(long_ds){
wide_ds <- stats::reshape(long_ds,
# varying = unique(long_ds$Item),
# v.names = c("Value"),
sep = ".",
timevar = "Item",
idvar = "Area",
direction = "wide",
new.row.names = NULL)
# remove "Value." part in names
names(wide_ds)[grepl("Value.", names(wide_ds))] <- gsub("Value.", "",
x = names(wide_ds)[grepl("Value.", names(wide_ds))])
}
)
wide_fb <- bind_cols(elmt_wide_ds_list)
elmt_wide_ds_list
elmt_wide_ds_list <- lapply(elmt_ds_list,
FUN = function(long_ds){
wide_ds <- stats::reshape(long_ds,
# varying = unique(long_ds$Item),
# v.names = c("Value"),
sep = ".",
timevar = "Item",
idvar = "Area",
direction = "wide",
new.row.names = NULL)
# remove "Value." part in names
names(wide_ds)[grepl("Value.", names(wide_ds))] <- gsub("Value.", "",
x = names(wide_ds)[grepl("Value.", names(wide_ds))])
return(wide_ds)
}
)
wide_fb <- bind_cols(elmt_wide_ds_list)
reshaped_vars <- names(wide_ds)[grepl("Value.", names(wide_ds))]
reshaped_vars
vars_slct <- grepl("Value.", names(wide_ds))
elmt
long_ds <- fb[fb$Element==elmt, c("Area", "Item", "Value")]
wide_ds <- stats::reshape(long_ds,
# varying = unique(long_ds$Item),
# v.names = c("Value"),
sep = ".",
timevar = "Item",
idvar = "Area",
direction = "wide",
new.row.names = NULL)
vars_slct <- grepl("Value.", names(wide_ds))
# those variables that have been reshaped, give the Element identifier to their names
names(wide_ds)[vars_slct] <- paste0(names(wide_ds)[vars_slct], " - ", elmt)
# remove "Value." part in names
names(wide_ds)[vars_slct] <- gsub("Value.", "",
x = names(wide_ds)[vars_slct])
head(wide_ds)
any(grepl("--", names(wide_ds)))
# "Food supply quantity (kg/capita/yr)" is the annual quantity available, but divided by population
elmt_wide_ds_list <- list()
for(elmt in unique(fb$Element)){
long_ds <- fb[fb$Element==elmt, c("Area", "Item", "Value")]
wide_ds <- stats::reshape(long_ds,
# varying = unique(long_ds$Item),
# v.names = c("Value"),
sep = ".",
timevar = "Item",
idvar = "Area",
direction = "wide",
new.row.names = NULL)
vars_slct <- grepl("Value.", names(wide_ds))
# those variables that have been reshaped, give the Element identifier to their names
names(wide_ds)[vars_slct] <- paste0(names(wide_ds)[vars_slct], " -- ", elmt)
# checked that "--" is not used in names already
# any(grepl("--", names(wide_ds)))
# remove "Value." part in names
names(wide_ds)[vars_slct] <- gsub("Value.", "",
x = names(wide_ds)[vars_slct])
elmt_wide_ds_list[[elmt]] <- wide_ds
}
# and then join them back based on country key
wide_fb <- bind_cols(elmt_wide_ds_list)
wide_fb <- elmt_wide_ds_list[[1]]
for(i in 2:length(elmt_wide_ds_list)){
wide_fb <- left_join(wide_fb, elmt_wide_ds_list[[i]], by = "Area")
}
head(wide_fb)
dim(wide_fb)
